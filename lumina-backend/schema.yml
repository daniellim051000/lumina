openapi: 3.0.3
info:
  title: Lumina Task Management API
  version: 1.0.0
  description: API for Lumina task management system inspired by Todoist and Notion.
    Features include tasks, subtasks, projects, labels, priorities (P1-P4), and rich
    notes functionality.
paths:
  /api/auth/change-password/:
    post:
      operationId: auth_change_password_create
      description: Password change view.
      tags:
      - auth
      - Authentication
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      description: Handle user logout and token blacklisting.
      tags:
      - auth
      - Authentication
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/profile/:
    get:
      operationId: auth_profile_retrieve
      description: User profile view.
      tags:
      - auth
      - Authentication
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: auth_profile_update
      description: User profile view.
      tags:
      - auth
      - Authentication
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/refresh/:
    post:
      operationId: auth_refresh_create
      description: Handle token refresh using cookies.
      tags:
      - auth
      - Authentication
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/signin/:
    post:
      operationId: auth_signin_create
      description: Handle user login.
      tags:
      - auth
      - Authentication
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/signup/:
    post:
      operationId: auth_signup_create
      description: Handle user registration.
      tags:
      - auth
      - Authentication
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/comments/{id}/:
    get:
      operationId: comments_retrieve
      description: Retrieve, update, or delete a task comment.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - comments
      - Comments
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskComment'
          description: ''
    put:
      operationId: comments_update
      description: Retrieve, update, or delete a task comment.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - comments
      - Comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskCommentRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskComment'
          description: ''
    patch:
      operationId: comments_partial_update
      description: Retrieve, update, or delete a task comment.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - comments
      - Comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTaskCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTaskCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTaskCommentRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskComment'
          description: ''
    delete:
      operationId: comments_destroy
      description: Retrieve, update, or delete a task comment.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - comments
      - Comments
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/health/:
    get:
      operationId: health_retrieve
      description: Simple health check endpoint to test API connectivity.
      tags:
      - health
      - General
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/info/:
    get:
      operationId: info_retrieve
      description: Provides basic API information for testing Electron-Django communication.
      tags:
      - info
      - General
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/labels/:
    get:
      operationId: labels_list
      description: List and create labels.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - labels
      - Labels
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLabelList'
          description: ''
    post:
      operationId: labels_create
      description: List and create labels.
      tags:
      - labels
      - Labels
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LabelRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LabelRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: ''
  /api/labels/{id}/:
    get:
      operationId: labels_retrieve
      description: Retrieve, update, or delete a label.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - labels
      - Labels
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: ''
    put:
      operationId: labels_update
      description: Retrieve, update, or delete a label.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - labels
      - Labels
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabelRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LabelRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LabelRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: ''
    patch:
      operationId: labels_partial_update
      description: Retrieve, update, or delete a label.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - labels
      - Labels
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLabelRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLabelRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLabelRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
          description: ''
    delete:
      operationId: labels_destroy
      description: Retrieve, update, or delete a label.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - labels
      - Labels
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/projects/:
    get:
      operationId: projects_list
      description: List and create projects.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - projects
      - Projects
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
    post:
      operationId: projects_create
      description: List and create projects.
      tags:
      - projects
      - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/projects/{id}/:
    get:
      operationId: projects_retrieve
      description: Retrieve, update, or delete a project.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      - Projects
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    put:
      operationId: projects_update
      description: Retrieve, update, or delete a project.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    patch:
      operationId: projects_partial_update
      description: Retrieve, update, or delete a project.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProjectRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    delete:
      operationId: projects_destroy
      description: Retrieve, update, or delete a project.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - projects
      - Projects
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/tasks/:
    get:
      operationId: tasks_list
      description: Get all tasks for the authenticated user with optional filtering,
        or create a new task.
      summary: List and create tasks
      parameters:
      - in: query
        name: completed
        schema:
          type: boolean
        description: Filter by completion status
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: priority
        schema:
          type: string
          enum:
          - ''
          - P1
          - P2
          - P3
          - P4
        description: Filter by priority level
      - in: query
        name: project
        schema:
          type: integer
        description: Filter by project ID
      - in: query
        name: search
        schema:
          type: string
        description: Search in title, description, and notes
      - in: query
        name: subtasks
        schema:
          type: string
          enum:
          - include
        description: Include subtasks in results
      - in: query
        name: view
        schema:
          type: string
          enum:
          - overdue
          - today
          - week
        description: Filter by special views
      tags:
      - tasks
      - Tasks
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskListList'
          description: ''
    post:
      operationId: tasks_create
      description: Get all tasks for the authenticated user with optional filtering,
        or create a new task.
      summary: List and create tasks
      parameters:
      - in: query
        name: completed
        schema:
          type: boolean
        description: Filter by completion status
      - in: query
        name: priority
        schema:
          type: string
          enum:
          - ''
          - P1
          - P2
          - P3
          - P4
        description: Filter by priority level
      - in: query
        name: project
        schema:
          type: integer
        description: Filter by project ID
      - in: query
        name: search
        schema:
          type: string
        description: Search in title, description, and notes
      - in: query
        name: subtasks
        schema:
          type: string
          enum:
          - include
        description: Include subtasks in results
      - in: query
        name: view
        schema:
          type: string
          enum:
          - overdue
          - today
          - week
        description: Filter by special views
      tags:
      - tasks
      - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
            examples:
              Today'sTasks:
                value:
                  view: today
                summary: Today's Tasks
                description: Get tasks scheduled for today
              HighPriorityTasks:
                value:
                  priority: P1
                summary: High Priority Tasks
                description: Get P1 and P2 priority tasks
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /api/tasks/{id}/:
    get:
      operationId: tasks_retrieve
      description: Retrieve, update, or delete a task.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - tasks
      - Tasks
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    put:
      operationId: tasks_update
      description: Retrieve, update, or delete a task.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - tasks
      - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    patch:
      operationId: tasks_partial_update
      description: Retrieve, update, or delete a task.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - tasks
      - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    delete:
      operationId: tasks_destroy
      description: Retrieve, update, or delete a task.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - tasks
      - Tasks
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/tasks/{task_id}/comments/:
    get:
      operationId: tasks_comments_list
      description: List and create comments for a task.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: task_id
        schema:
          type: integer
        required: true
      tags:
      - tasks
      - Tasks
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskCommentList'
          description: ''
    post:
      operationId: tasks_comments_create
      description: List and create comments for a task.
      parameters:
      - in: path
        name: task_id
        schema:
          type: integer
        required: true
      tags:
      - tasks
      - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCommentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskCommentRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskComment'
          description: ''
  /api/tasks/bulk/:
    patch:
      operationId: tasks_bulk_partial_update
      description: Perform bulk operations on multiple tasks like completing, uncompleting,
        or reordering.
      summary: Bulk update tasks
      tags:
      - tasks
      - Tasks
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /api/tasks/quick/:
    post:
      operationId: tasks_quick_create
      description: Quick task creation with minimal fields.
      tags:
      - tasks
      - Tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskQuickCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskQuickCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskQuickCreateRequest'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskQuickCreate'
          description: ''
  /api/tasks/stats/:
    get:
      operationId: tasks_stats_retrieve
      description: Get comprehensive statistics about tasks for the authenticated
        user including counts by status, priority, and time-based views.
      summary: Get task statistics
      tags:
      - tasks
      - Tasks
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    Label:
      type: object
      description: Label serializer.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        color:
          type: string
          maxLength: 7
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
    LabelRequest:
      type: object
      description: Label serializer.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        color:
          type: string
          minLength: 1
          maxLength: 7
      required:
      - name
    PaginatedLabelList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Label'
    PaginatedProjectList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    PaginatedTaskCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TaskComment'
    PaginatedTaskListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/TaskList'
    PatchedLabelRequest:
      type: object
      description: Label serializer.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        color:
          type: string
          minLength: 1
          maxLength: 7
    PatchedProjectRequest:
      type: object
      description: Project serializer.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        color:
          type: string
          minLength: 1
          maxLength: 7
        parent:
          type: integer
          nullable: true
        position:
          type: integer
          maximum: 2147483647
          minimum: 0
        is_active:
          type: boolean
    PatchedTaskCommentRequest:
      type: object
      description: Task comment serializer.
      properties:
        content:
          type: string
          minLength: 1
    PatchedTaskRequest:
      type: object
      description: Task serializer with full details.
      properties:
        title:
          type: string
          minLength: 1
          description: The task title or name
          maxLength: 500
        description:
          type: string
          description: Optional task description
        notes:
          type: string
          description: Rich notes section for detailed information, similar to Notion
        priority:
          enum:
          - P1
          - P2
          - P3
          - P4
          - ''
          type: string
          x-spec-enum-id: 54d3e2866bf60198
          description: |-
            Task priority level (P1=Urgent, P2=High, P3=Medium, P4=Low, empty=No priority)

            * `P1` - Priority 1 (Urgent)
            * `P2` - Priority 2 (High)
            * `P3` - Priority 3 (Medium)
            * `P4` - Priority 4 (Low)
            * `` - No Priority
        date:
          type: string
          format: date
          nullable: true
          description: When to work on this task
        due_date:
          type: string
          format: date
          nullable: true
          description: Task deadline
        is_completed:
          type: boolean
        project_id:
          type: integer
          writeOnly: true
          nullable: true
        parent_task:
          type: integer
          nullable: true
        label_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        position:
          type: integer
          maximum: 2147483647
          minimum: 0
    Project:
      type: object
      description: Project serializer.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        color:
          type: string
          maxLength: 7
        user:
          allOf:
          - $ref: '#/components/schemas/UserSimple'
          readOnly: true
        parent:
          type: integer
          nullable: true
        position:
          type: integer
          maximum: 2147483647
          minimum: 0
        is_active:
          type: boolean
        task_count:
          type: string
          readOnly: true
        completed_task_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - completed_task_count
      - created_at
      - id
      - name
      - task_count
      - updated_at
      - user
    ProjectRequest:
      type: object
      description: Project serializer.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        color:
          type: string
          minLength: 1
          maxLength: 7
        parent:
          type: integer
          nullable: true
        position:
          type: integer
          maximum: 2147483647
          minimum: 0
        is_active:
          type: boolean
      required:
      - name
    Task:
      type: object
      description: Task serializer with full details.
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          description: The task title or name
          maxLength: 500
        description:
          type: string
          description: Optional task description
        notes:
          type: string
          description: Rich notes section for detailed information, similar to Notion
        priority:
          enum:
          - P1
          - P2
          - P3
          - P4
          - ''
          type: string
          x-spec-enum-id: 54d3e2866bf60198
          description: |-
            Task priority level (P1=Urgent, P2=High, P3=Medium, P4=Low, empty=No priority)

            * `P1` - Priority 1 (Urgent)
            * `P2` - Priority 2 (High)
            * `P3` - Priority 3 (Medium)
            * `P4` - Priority 4 (Low)
            * `` - No Priority
        date:
          type: string
          format: date
          nullable: true
          description: When to work on this task
        due_date:
          type: string
          format: date
          nullable: true
          description: Task deadline
        is_completed:
          type: boolean
        completed_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserSimple'
          readOnly: true
        project:
          allOf:
          - $ref: '#/components/schemas/Project'
          readOnly: true
        parent_task:
          type: integer
          nullable: true
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
          readOnly: true
        position:
          type: integer
          maximum: 2147483647
          minimum: 0
        comments:
          type: array
          items:
            $ref: '#/components/schemas/TaskComment'
          readOnly: true
        is_overdue:
          type: string
          readOnly: true
        subtask_count:
          type: string
          readOnly: true
        completed_subtask_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - comments
      - completed_at
      - completed_subtask_count
      - created_at
      - id
      - is_overdue
      - labels
      - project
      - subtask_count
      - title
      - updated_at
      - user
    TaskComment:
      type: object
      description: Task comment serializer.
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserSimple'
          readOnly: true
        content:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - content
      - created_at
      - id
      - updated_at
      - user
    TaskCommentRequest:
      type: object
      description: Task comment serializer.
      properties:
        content:
          type: string
          minLength: 1
      required:
      - content
    TaskList:
      type: object
      description: Lightweight task serializer for list views.
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          description: The task title or name
          maxLength: 500
        priority:
          enum:
          - P1
          - P2
          - P3
          - P4
          - ''
          type: string
          x-spec-enum-id: 54d3e2866bf60198
          description: |-
            Task priority level (P1=Urgent, P2=High, P3=Medium, P4=Low, empty=No priority)

            * `P1` - Priority 1 (Urgent)
            * `P2` - Priority 2 (High)
            * `P3` - Priority 3 (Medium)
            * `P4` - Priority 4 (Low)
            * `` - No Priority
        date:
          type: string
          format: date
          nullable: true
          description: When to work on this task
        due_date:
          type: string
          format: date
          nullable: true
          description: Task deadline
        is_completed:
          type: boolean
        project:
          type: string
          readOnly: true
        parent_task:
          type: integer
          nullable: true
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
          readOnly: true
        position:
          type: integer
          maximum: 2147483647
          minimum: 0
        is_overdue:
          type: string
          readOnly: true
        subtask_count:
          type: string
          readOnly: true
        completed_subtask_count:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - completed_subtask_count
      - created_at
      - id
      - is_overdue
      - labels
      - project
      - subtask_count
      - title
      - updated_at
    TaskQuickCreate:
      type: object
      description: Quick task creation serializer with minimal fields.
      properties:
        title:
          type: string
          description: The task title or name
          maxLength: 500
        priority:
          enum:
          - P1
          - P2
          - P3
          - P4
          - ''
          type: string
          x-spec-enum-id: 54d3e2866bf60198
          description: |-
            Task priority level (P1=Urgent, P2=High, P3=Medium, P4=Low, empty=No priority)

            * `P1` - Priority 1 (Urgent)
            * `P2` - Priority 2 (High)
            * `P3` - Priority 3 (Medium)
            * `P4` - Priority 4 (Low)
            * `` - No Priority
        date:
          type: string
          format: date
          nullable: true
          description: When to work on this task
        due_date:
          type: string
          format: date
          nullable: true
          description: Task deadline
        project_id:
          type: integer
          nullable: true
        parent_task:
          type: integer
          nullable: true
      required:
      - title
    TaskQuickCreateRequest:
      type: object
      description: Quick task creation serializer with minimal fields.
      properties:
        title:
          type: string
          minLength: 1
          description: The task title or name
          maxLength: 500
        priority:
          enum:
          - P1
          - P2
          - P3
          - P4
          - ''
          type: string
          x-spec-enum-id: 54d3e2866bf60198
          description: |-
            Task priority level (P1=Urgent, P2=High, P3=Medium, P4=Low, empty=No priority)

            * `P1` - Priority 1 (Urgent)
            * `P2` - Priority 2 (High)
            * `P3` - Priority 3 (Medium)
            * `P4` - Priority 4 (Low)
            * `` - No Priority
        date:
          type: string
          format: date
          nullable: true
          description: When to work on this task
        due_date:
          type: string
          format: date
          nullable: true
          description: Task deadline
        project_id:
          type: integer
          nullable: true
        parent_task:
          type: integer
          nullable: true
      required:
      - title
    TaskRequest:
      type: object
      description: Task serializer with full details.
      properties:
        title:
          type: string
          minLength: 1
          description: The task title or name
          maxLength: 500
        description:
          type: string
          description: Optional task description
        notes:
          type: string
          description: Rich notes section for detailed information, similar to Notion
        priority:
          enum:
          - P1
          - P2
          - P3
          - P4
          - ''
          type: string
          x-spec-enum-id: 54d3e2866bf60198
          description: |-
            Task priority level (P1=Urgent, P2=High, P3=Medium, P4=Low, empty=No priority)

            * `P1` - Priority 1 (Urgent)
            * `P2` - Priority 2 (High)
            * `P3` - Priority 3 (Medium)
            * `P4` - Priority 4 (Low)
            * `` - No Priority
        date:
          type: string
          format: date
          nullable: true
          description: When to work on this task
        due_date:
          type: string
          format: date
          nullable: true
          description: Task deadline
        is_completed:
          type: boolean
        project_id:
          type: integer
          writeOnly: true
          nullable: true
        parent_task:
          type: integer
          nullable: true
        label_ids:
          type: array
          items:
            type: integer
            writeOnly: true
          writeOnly: true
        position:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - title
    UserSimple:
      type: object
      description: Simple user serializer for nested relationships.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - id
      - username
    UserSimpleRequest:
      type: object
      description: Simple user serializer for nested relationships.
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  examples:
    TaskExample:
      summary: Task Example
      description: Example task with all fields
      value:
        id: 1
        title: Complete project documentation
        description: Write comprehensive API documentation
        notes: Include examples and usage patterns
        priority: P2
        date: '2024-01-15'
        due_date: '2024-01-20'
        is_completed: false
        project:
          id: 1
          name: Documentation Project
          color: '#3B82F6'
        labels:
        - id: 1
          name: documentation
          color: '#10B981'
        subtask_count: 3
        completed_subtask_count: 1
        is_overdue: false
    ProjectExample:
      summary: Project Example
      description: Example project with task counts
      value:
        id: 1
        name: Website Redesign
        description: Complete redesign of the company website
        color: '#8B5CF6'
        task_count: 15
        completed_task_count: 7
        is_active: true
