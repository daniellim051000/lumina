"""Django settings for lumina project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",  # Enable token blacklisting
    "drf_spectacular",  # API Documentation
    "corsheaders",
    "django_ratelimit",  # Rate limiting for security
    "api",
    "api.task",  # Task management app
    "pomodoro",  # Pomodoro timer app
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "lumina.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "lumina.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("DB_NAME"),
        "USER": config("DB_USER"),
        "PASSWORD": config("DB_PASSWORD"),
        "HOST": config("DB_HOST"),
        "PORT": config("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Cache configuration for rate limiting
REDIS_HOST = config("REDIS_HOST", default="localhost")
REDIS_PORT = config("REDIS_PORT", default=6379, cast=int)
REDIS_DB = config("REDIS_DB", default=1, cast=int)

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "IGNORE_EXCEPTIONS": True,  # Graceful degradation if Redis is unavailable
        },
    }
}

# Fallback to DummyCache in testing environments
if config("USE_REDIS", default=True, cast=bool) is False:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django REST Framework Configuration
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "api.authentication.JWTCookieAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",  # Fallback
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# CORS Configuration
CORS_ALLOWED_ORIGINS = config(
    "CORS_ALLOWED_ORIGINS", default="http://localhost:3000,http://127.0.0.1:3000"
).split(",")

CORS_ALLOW_CREDENTIALS = True

# Additional CORS settings for development
CORS_ALLOW_ALL_ORIGINS = config("CORS_ALLOW_ALL_ORIGINS", default=False, cast=bool)
if DEBUG and not CORS_ALLOW_ALL_ORIGINS:
    # In development, ensure both localhost variations are allowed
    if "http://localhost:3000" not in CORS_ALLOWED_ORIGINS:
        CORS_ALLOWED_ORIGINS.append("http://localhost:3000")
    if "http://127.0.0.1:3000" not in CORS_ALLOWED_ORIGINS:
        CORS_ALLOWED_ORIGINS.append("http://127.0.0.1:3000")

# Allow specific headers for Electron communication
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# JWT Configuration for long-term sessions
from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        minutes=15
    ),  # 15-minute access tokens for security
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=30
    ),  # 30-day refresh tokens (reduced from 90)
    "ROTATE_REFRESH_TOKENS": True,  # Generate new refresh token on each refresh
    "BLACKLIST_AFTER_ROTATION": True,  # Blacklist old refresh tokens for security
    "UPDATE_LAST_LOGIN": True,  # Update user's last_login field
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

# Rate Limiting Configuration
RATELIMIT_USE_CACHE = "default"
AUTH_SIGNUP_RATE_LIMIT = config("AUTH_SIGNUP_RATE_LIMIT", default="5/m")
AUTH_SIGNIN_RATE_LIMIT = config("AUTH_SIGNIN_RATE_LIMIT", default="5/m")

# Cookie Security Settings for JWT
SECURE_SSL_REDIRECT = config("SECURE_SSL_REDIRECT", default=False, cast=bool)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_HSTS_SECONDS = config("SECURE_HSTS_SECONDS", default=0, cast=int)
SECURE_HSTS_INCLUDE_SUBDOMAINS = config(
    "SECURE_HSTS_INCLUDE_SUBDOMAINS", default=False, cast=bool
)
SECURE_HSTS_PRELOAD = config("SECURE_HSTS_PRELOAD", default=False, cast=bool)

# Cookie settings for JWT tokens
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = config(
    "COOKIE_SECURE", default=False, cast=bool
)  # Set to True in production
SESSION_COOKIE_SAMESITE = config("COOKIE_SAMESITE", default="Lax")

# Custom cookie settings for JWT
JWT_COOKIE_NAME = "jwt_access_token"
JWT_REFRESH_COOKIE_NAME = "jwt_refresh_token"
JWT_COOKIE_MAX_AGE = 15 * 60  # 15 minutes for access token
JWT_REFRESH_COOKIE_MAX_AGE = 30 * 24 * 60 * 60  # 30 days for refresh token
JWT_COOKIE_HTTPONLY = True
JWT_COOKIE_SECURE = config(
    "COOKIE_SECURE", default=False, cast=bool
)  # Set to True in production with HTTPS
JWT_COOKIE_SAMESITE = config("COOKIE_SAMESITE", default="Lax")

# drf-spectacular Configuration
SPECTACULAR_SETTINGS = {
    "TITLE": "Lumina Task Management API",
    "DESCRIPTION": "API for Lumina task management system inspired by Todoist and Notion. "
    "Features include tasks, subtasks, projects, labels, priorities (P1-P4), "
    "and rich notes functionality.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SCHEMA_PATH_PREFIX": "/api",
    "COMPONENT_SPLIT_REQUEST": True,
    "SERVE_AUTHENTICATION": ["rest_framework.authentication.SessionAuthentication"],
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": False,
        "defaultModelsExpandDepth": 2,
        "defaultModelExpandDepth": 2,
    },
    "REDOC_UI_SETTINGS": {
        "hideDownloadButton": False,
        "expandResponses": "200,201",
    },
    "SORT_OPERATION_PARAMETERS": True,
    "ENUM_NAME_OVERRIDES": {
        "TaskPriorityChoices": "api.task.models.Task.PRIORITY_CHOICES",
    },
    "PREPROCESSING_HOOKS": ["api.spectacular_hooks.preprocessing_filter_spec"],
    "POSTPROCESSING_HOOKS": ["api.spectacular_hooks.postprocessing_hook"],
}
